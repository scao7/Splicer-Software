Treadmill Remote Control Protocol
Contact: Kuba Ober, kuba@bertec.com
Revised: 04/17/2018


Introduction

The Treadmill Control Panel can be remotely controlled using either TCP
or UDP internet protocols.

The remote control has to be enabled in the Settings dialog of the
Treadmill Control Panel. This allows the treadmill control application
to accept TCP connections if TCP protocol was chosen. The treadmill
application will also send out feedback updates using the chosen
protocol. Initially, any data packets it receives are discared.

To fully activate the remote control, click the “Enable Remote Control”
button in the Treadmill Control Panel. This enables the software to
accept and act on the data it receives. Any manipulation of the controls
by the user will cause further incoming data to be discarded, and the
enable button will reappear.


Example Code

Please observe the following:

-   DO NOT USE THE EXAMPLE CODE with a live subject on the belt!

-   THE EXAMPLE CODE (“SOFTWARE”) IS PROVIDED “AS IS”, WITHOUT WARRANTY
    OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

There are three example remote control programs included for educational
purposes only. All come with full source code, licensed as given in the
source files.

-   tm_set.m and tm_test.m are Matlab examples using the Instrument
    Toolbox;
-   treadmill-remote.exe is a Qt-based example remote control panel;
-   treadmill-remote.dll is a pure C library implementing the minimum
    functionality necessary to connect to the Treadmill Control Panel
    using Windows Sockets networking API. It can be used in prototype
    user applications, and is accessible from most programming
    languages.

The treadmill-remote.exe program has an option of using the
treadmill-remote.dll library. When running self-compiled
treadmill-remote.exe, make sure that the library .dll file is in the
same folder as treadmill-remote.exe.

To minimize the size of the distributed code, the remote control program
is not supplied pre-compiled into a separate executable. There is a
shortcut that starts it using the main treadmill control panel
executable.


How to Compile the Example Code

The Matlab example code was tested with MATLAB R2014a and is in public
domain, see http://unlicense.org. Invoke help tm_set to get usage
information for the tm_set function. A usage example is given in
tm_test.m.

The accompanying source code is released under the terms of the BSD
3-Clause License, included at the top of each source file.

Compilation requires the use of Qt toolkit, available from
http://qt-project.org/downloads.

There are two options when building the code:

1.  Use Qt 5.x for Windows 32-bit MinGW. That package includes the Qt
    library, the MinGW C/C++ compilers and build tools, and the Qt
    Creator integrated development environment (IDE).

2.  Use Qt 5.x or Qt 4.8 for Windows for VS 20xx. You need to have a
    matching version of Visual Studio installed. Visual Studio Express
    is sufficient. The Qt Creator is bundled with Qt 5 - you can use it
    as the IDE to simplify building of Qt-based packages even when
    Visual Studio is the underlying compiler.

The supplied example code will work with either Qt 4.8 or 5.x. Your
choice of Qt version will be affected by the version of Visual Studio
that you have:

-   VS2012 or newer: Only Qt 5 is supported, unless you compile Qt 4.8
    from sources yourself
-   VS2010: Both Qt 4 and Qt 5 are supported
-   VS2008: Only Qt 4 is supported

The program will be built as release-remote.exe

-   Compiling with a Visual Studio 2008 or Later Compiler

    After installing the Qt toolkit; open the Visual Studio Command
    Prompt and type:

          cd "C:\Program Files\Bertec\Treadmill\Remote"
            ... or ...
          cd "C:\Program Files (x86)\Bertec\Treadmill\Remote"
          qmake
          nmake

-   Compiling with Qt Creator with any Compiler Supported by Qt

    Open Qt Creator, on the Welcome pane click the “Open Project”
    button. Open the “C:Files-Remote-Qt.pro” project. Select the Qt
    version to build with when prompted. Press Ctrl-R to build and run
    the project.

-   Compilation on Other Platforms

    The code should also work on unix and OS X platforms where Qt is
    installed. Ensure that the Qt libraries and development tools are
    installed. From the shell, changed into the source folder and run
    qmake followed by make or gmake.


Packet Synchronization

Setpoint Packets (User Application to Treadmill Control Panel)

TCP/IP

There are no provisions in the packet format for packet boundary
re-synchronization within the TCP/IP stream. It is important that all
packets sent by the user application start on a 64-byte boundary in the
TCP data stream.

To minimize the latency in the transmission of the setpoint packets over
TCP/IP, set the TCP_NODELAY option on the socket. The setting of this
option only affects the sending of the setpoints from your code. Since
the option only affects the end of the connection on which it is set,
the Treadmill Control Panel sets the same option on its end of the
connection. This ensures that the feedback packets will be sent to you
over TCP/IP with minimum latency. This option only applies to TCP/IP
connections. Setting it on a UDP/IP socket is an error.

UDP/IP

The packets must constitute complete UDP datagrams. This provides for
implied synchronization – each datagram is examined separately. Packets
split across multiple datagrams are discarded.

Feedback Packets (Treadmill Control Panel to User Application)

Data received by the user application has to be decoded on 32-byte
boundaries in the TCP/IP stream.

With UDP, the user application must decode UDP datagrams separately.


Data Format

Notation

All multi-byte integers are sent big-endian (most significant byte
first). All signed integers are coded in 2s-complement.

    [{count x} <u|s> - u(nsigned)/s(igned) <8|16> - size in bits]

When not given, the default count is 1.

    Belt 0 - right (front) belt
    Belt 1 - left (front) belt
    Belt 2 - right rear belt
    Belt 3 - left rear belt

All packets are notated using the custom notation as well as
pseudo-C++-code:

    enum BeltIndex { Right_Front = 0, Left_Front = 1, Right_Rear = 2, Left_Rear = 3 };

Setpoint Packets, To Be Sent From the User Application

    [u8]      format specifier (set to 0)
    [4 x s16] belt 0..3 speed in mm/s
    [4 x s16] belt 0..3 acceleration in mm/s^2
    [s16]     incline angle in 0.01 deg
    [4 x s16] 1s complement (bit-inverted) belt 0..3 speed in mm/s
    [4 x s16] 1s complement (bit-inverted) belt 0..3 acceleration in mm/s^2
    [s16]     1s complement (bit-inverted) incline angle in 0.01 deg
    [27 x u8] padding
    Size: 1 + 2*(16+2) + 27 = 28+36 = 64 bytes

C++ structure notation - assumes a packed structure:

    struct TreadmillSetpoint {
      uint8_t format = 0;
      int16_t belt_speed[4];            //
      int16_t belt_acceleration[4];     // 9 straight-coded values
      int16_t incline_angle;            //
      int16_t belt_speed_complement[4];         //
      int16_t belt_acceleration_complement[4];  // 9 1s-complement values
      int16_t incline_angle_complement;         //
      uint8_t padding[27];
    };

The straight-coded and complement values must match _for all fields -
whether a given treadmill have all belts and incline or not_. I.e.: each
of the 9 complement values must be a bit-wise inversion of the
straight-coded value; otherwise the packet is silently discarded.

Feedback Packets, Sent From the Treadmill Control Panel

    [u8]      format specifier (value is 0)
    [4 x s16] belt 0..3 speed in mm/s
    [s16]     incline angle in 0.01 deg
    [21 x u8] padding
    Size: 1 + (8+2) + 21 = 22 + 10 = 32 bytes

C++ structure notation - assumes a packed structure:

    struct TreadmillFeedback {
      uint8_t format = 0;
      int16_t belt_speed[4];
      int16_t incline_angle;
      uint8_t padding[21];
    };

Example Setpoint Packet

Assume following parameters:

-   right belt speed: 2.0 m/s = 0x07D0 mm/s,
-   left belt speed: 1.0 m/s = 0x03E8 mm/s,
-   right belt acceleration: 0.25 m/s² = 0x00FA mm/s²,
-   left belt acceleration: 0.5 m/s² = 0x01F4 mm/s².

The following packet results:

    struct S {
      uint8_t format = 0;
      int16_t belt_speed[4] =       { 0x7D0, 0x3E8, 0, 0 };
      int16_t belt_acceleration[4] = { 0xFA, 0x1F4, 0, 0 };
      int16_t incline_angle = 0;
      int16_t belt_speed_complement[4] =        { 0xF82F, 0xFC17, 0xFFFF, 0xFFFF };
      int16_t belt_acceleration_complement[4] = { 0xFF05, 0xFE0B, 0xFFFF, 0xFFFF };
      int16_t incline_angle_complement = 0xFFFF;
      uint8_t padding[27];
    };

The packet has following binary contents, expressed in hexadecimal
notation (in big-endian or natural order).

    Grouped According To Function

    00 * 07D0 03E8 0000 0000 * 00FA 01F4 0000 0000 * 0000
       * F82F FC17 FFFF FFFF * FF05 FE0B FFFF FFFF * FFFF
    00   0000 0000 0000 0000 0000 0000 0000 0000
         0000 0000 0000 0000 0000

    Grouped in 16-bit Groups

    0007 D003 E800 0000 0000 FA01 F400 0000
    0000 00F8 2FFC 17FF FFFF FFFE 05FE 0BFF
    FFFF FFFF FF00 0000 0000 0000 0000 0000
    0000 0000 0000 0000 0000 0000 0000 0000
